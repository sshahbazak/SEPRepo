import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
from graphviz import Digraph

# Function to wrap text
def wrap_text(text, width):
    words = text.split()
    wrapped_lines = [' '.join(words[i:i+width]) for i in range(0, len(words), width)]
    return '\n'.join(wrapped_lines)

# Specifications for the safety case
specifications = {
    'nodes': [
        {'id': 'G1', 'label': 'Goal G1', 'text': 'When needed the kill switch stops the motors on the targeted drone.', 'shape': 'rectangle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'S1', 'label': 'Strategy', 'text': 'Argue that the RPIC can kill motors on the targeted drone when needed.', 'shape': 'parallelogram', 'fillcolor': 'gray96', 'margin': '0.1'},
        {'id': 'G2', 'label': 'Goal G2', 'text': 'After the killswitch is depressed for 3 secs, the motors are killed.', 'shape': 'rectangle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'G3', 'label': 'Goal G3', 'text': 'When the drone is in the air, the user only kills motors for the intended drone.', 'shape': 'rectangle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'S2', 'label': 'Strategy', 'text': 'Argue that the operator has sufficient information and appropriate affordances to kill the motors on the correct drone.', 'shape': 'parallelogram', 'fillcolor': 'gray96', 'margin': '0.0'},
        {'id': 'G4', 'label': 'Goal G4', 'text': 'The RPIC has sufficient feedback on which drone is to be "killed".', 'shape': 'rectangle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'G5', 'label': 'Goal G5', 'text': 'RPICs have at least two seconds to avert the kill after alerts are raised.', 'shape': 'rectangle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'S3', 'label': 'Strategy', 'text': 'Argue that the user has sufficient time to abort the kill if they attempt to kill the wrong drone', 'shape': 'parallelogram', 'fillcolor': 'gray96', 'margin': '0.1'},
        {'id': 'O1', 'label': 'Solution S1', 'text': 'HiFUZZ tests pass on combos of flight modes, flying states, and killswitch press durations.', 'shape': 'circle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'T1', 'label': '', 'text': 'HiFUZZ Tests:\nL1 (118 Passed, 12 Failed)\nL2 (2 Passed, 1 Failed)', 'shape': 'none', 'fillcolor': 'tomato', 'margin': '0.0', 'rows': True},
        {'id': 'O2', 'label': 'Solution S5', 'text': 'HiFUZZ tests show that the RPIC has >= 2 secs to abort after a killswitch warning.', 'shape': 'circle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'T2', 'label': '', 'text': 'HiFUZZ Tests:\nL1 (52 Passed)\nL2 (0 Passed, 2 Failed)', 'shape': 'none', 'fillcolor': 'tomato', 'margin': '0.0', 'rows': True},
        {'id': 'O3', 'label': 'Solution S6', 'text': 'A verbal warning is issued when the killswitch is activated.', 'shape': 'circle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'O4', 'label': 'Solution S7', 'text': 'A mobile app depicts the current location of each sUAS inflight.', 'shape': 'circle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'O5', 'label': 'Solution S8', 'text': 'A unique color is used to label each drone, its RC & associated GUI Icons.', 'shape': 'circle', 'fillcolor': 'gray80', 'margin': '0.1'}
    ],
    'edges': [
        ('G1', 'S1'),
        ('S1', 'G2'),
        ('S1', 'G3'),
        ('G2', 'O1'),
        ('O1', 'T1'),
        ('G3', 'S2'),
        ('G3', 'S3'),
        ('S2', 'G4'),
        ('S3', 'G5'),
        ('G4', 'O3'),
        ('G4', 'O4'),
        ('G5', 'O2'),
        ('O2', 'T2'),
        ('G4', 'O5')
    ]
}

# Create a new directed graph
dot = Digraph()

# Add nodes with word wrapping and reduced font size
for node in specifications['nodes']:
    if node.get('rows'):
        text_lines = node['text'].split('\n')
        label = f"""<
            <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" BGCOLOR="tomato">
                <TR><TD COLSPAN="3">{text_lines[0]}</TD></TR>
                {''.join(f'<TR><TD>{line}</TD></TR>' for line in text_lines[1:])}
            </TABLE>
        >"""
    else:
        wrap_width = 3 if node['shape'] == 'circle' else 7
        text = wrap_text(node['text'], wrap_width)
        label = f'<{node["label"]}>\n{text}' if node['label'] else text
    node_attrs = {
        'fontsize': '15',
        'margin': node.get('margin', '0.1'),
        'fixedsize': 'false'
    }
    dot.node(node['id'], label, shape=node['shape'], fillcolor=node['fillcolor'], style='filled', **node_attrs)

# Add edges
for edge in specifications['edges']:
    dot.edge(*edge)

# Render the graph to a PNG file
graph_image_path = 'output_graph'
dot.render(graph_image_path, format='png')

class ZoomableImage:
    def __init__(self, canvas, image_path):
        self.canvas = canvas
        self.image_path = image_path
        self.image = Image.open(self.image_path)
        self.photo = ImageTk.PhotoImage(self.image)

        self.canvas_image = self.canvas.create_image(0, 0, anchor=tk.NW, image=self.photo)
        self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))

        self.scale = 1.0
        self.canvas.bind("<MouseWheel>", self.zoom)

    def zoom(self, event):
        if event.delta > 0:
            self.scale *= 1.1
        elif event.delta < 0:
            self.scale /= 1.1

        self.update_image()

    def update_image(self):
        width, height = int(self.image.width * self.scale), int(self.image.height * self.scale)
        resized_image = self.image.resize((width, height), Image.Resampling.LANCZOS)
        self.photo = ImageTk.PhotoImage(resized_image)

        self.canvas.itemconfig(self.canvas_image, image=self.photo)
        self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))

# Create a Tkinter window with scrollbars
root = tk.Tk()
root.title("Graph Visualization")

# Create a frame for the canvas and scrollbars
frame = tk.Frame(root)
frame.pack(fill=tk.BOTH, expand=1)

# Add a canvas in the frame
canvas = tk.Canvas(frame)
canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)

# Add vertical scrollbar to the canvas
v_scrollbar = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=canvas.yview)
v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

# Add horizontal scrollbar to the canvas
h_scrollbar = ttk.Scrollbar(root, orient=tk.HORIZONTAL, command=canvas.xview)
h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)

# Configure the canvas
canvas.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox('all')))

# Load the image and add zoom functionality
zoomable_image = ZoomableImage(canvas, graph_image_path + '.png')

# Start the Tkinter main loop
root.mainloop()
