# BLANK DRONE DATASET FAULT TREE:

# import pydot
# import matplotlib.pyplot as plt
# import matplotlib.image as mpimg

# # Function to create and save the fault tree
# def create_fault_tree(file_path):
#     # Create a new directed graph
#     graph = pydot.Dot(graph_type='digraph', rankdir='TB')

#     # Create nodes
#     top_event = pydot.Node("Y", label="A drone completes its mission of\nflying in a triangle shape, even if it\nencounters a restricted area", shape='box')
#     and_gate = pydot.Node("AND", label="AND", shape='circle')
#     or_gate = pydot.Node("OR", label="OR", shape='ellipse')
#     geofence_setting = pydot.Node("A'", label="Geofence Setting: any values", shape='box')
#     throttle_setting = pydot.Node("B'", label="Throttle: any values", shape='box')
#     mode_offboard = pydot.Node("D", label="Mode: Offboard", shape='box')

#     # Add nodes to the graph
#     graph.add_node(top_event)
#     graph.add_node(and_gate)
#     graph.add_node(or_gate)
#     graph.add_node(geofence_setting)
#     graph.add_node(throttle_setting)
#     graph.add_node(mode_offboard)

#     # Create edges
#     graph.add_edge(pydot.Edge(top_event, and_gate))
#     graph.add_edge(pydot.Edge(and_gate, or_gate))
#     graph.add_edge(pydot.Edge(and_gate, mode_offboard))
#     graph.add_edge(pydot.Edge(or_gate, geofence_setting))
#     graph.add_edge(pydot.Edge(or_gate, throttle_setting))

#     # Save the graph as a PNG file
#     graph.write_png(file_path)

# # Function to display the image using matplotlib
# def display_image(file_path):
#     img = mpimg.imread(file_path)
#     plt.imshow(img)
#     plt.axis('off')
#     plt.show()

# # File path to save the image
# file_path = 'fault_tree.png'

# # Create the fault tree
# create_fault_tree(file_path)

# # Display the generated fault tree
# display_image(file_path)




# A FAULT TREE CREATED FROM AN EXAMPLE DATASET (IRISES)

# import pandas as pd
# from graphviz import Digraph
# import tkinter as tk
# from PIL import Image, ImageTk
# from tkinter import ttk
# from sklearn.datasets import load_iris

# # Load the Iris dataset
# iris = load_iris()
# df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
# df['target'] = iris.target

# # Create a hypothetical fault tree based on some relationships in the Iris dataset
# # For simplicity, we assume some arbitrary relationships between features and target
# fault_tree_data = {
#     'ID': ['N1', 'N2', 'N3', 'N4', 'N5', 'N6', 'N7'],
#     'Label': [
#         'High Sepal Length',
#         'High Sepal Width',
#         'High Petal Length',
#         'High Petal Width',
#         'Species Setosa',
#         'Species Versicolor',
#         'Species Virginica'
#     ],
#     'Type': [
#         'OR', 'AND', 'AND', 'AND', 'Basic Event', 'Basic Event', 'Basic Event'
#     ],
#     'Parent ID': [
#         '', 'N1', 'N1', 'N1', 'N2', 'N3', 'N4'
#     ]
# }

# # Convert the fault tree data into a DataFrame
# fault_tree_df = pd.DataFrame(fault_tree_data)

# def create_fault_tree_from_df(df):
#     # Create a new directed graph
#     dot = Digraph()

#     # Add nodes to the graph
#     for _, row in df.iterrows():
#         node_id = row['ID']
#         label = row['Label']
#         node_type = row['Type'].strip().lower()
        
#         if node_type == 'basic event':
#             shape = 'ellipse'
#         elif node_type == 'and':
#             shape = 'box'
#         elif node_type == 'or':
#             shape = 'diamond'
#         else:
#             shape = 'ellipse'  # Default shape for unspecified types
        
#         dot.node(node_id, label, shape=shape)
    
#     # Add edges to the graph
#     for _, row in df.iterrows():
#         if pd.notnull(row['Parent ID']) and row['Parent ID'] != '':
#             dot.edge(row['Parent ID'], row['ID'])
    
#     return dot

# # Create the fault tree from the DataFrame
# fault_tree = create_fault_tree_from_df(fault_tree_df)

# # Render the graph to a PNG file
# graph_image_path = 'fault_tree'
# fault_tree.render(graph_image_path, format='png')

# # Display the graph in a Tkinter window
# def display_graph_in_tkinter(image_path):
#     # Create a Tkinter window
#     root = tk.Tk()
#     root.title("Fault Tree Visualization")
    
#     # Load the image using PIL
#     image = Image.open(image_path + '.png')  # Add the .png extension
#     photo = ImageTk.PhotoImage(image)
    
#     # Create a label to display the image
#     label = ttk.Label(root, image=photo)
#     label.image = photo  # Keep a reference to the image
#     label.pack()
    
#     # Start the Tkinter main loop
#     root.mainloop()

# # Display the generated fault tree
# display_graph_in_tkinter(graph_image_path)



# COLORED CODED FAULT TREE OF DRONE DATASET:

import pydot
import tkinter as tk
from PIL import Image, ImageTk
from tkinter import ttk

# Function to create and save the fault tree
def create_fault_tree(file_path):
    # Create a new directed graph
    graph = pydot.Dot(graph_type='digraph', rankdir='TB')

    # Create nodes with colors and specific shapes
    top_event = pydot.Node("Y", label="A drone completes its mission of\nflying in a triangle shape, even if it\nencounters a restricted area", shape='box', style='filled', fillcolor='skyblue3')
    and_gate = pydot.Node("AND", label="AND", shape='circle', style='filled', fillcolor='lightgreen')
    or_gate = pydot.Node("OR", label="OR", shape='circle', style='filled', fillcolor='salmon')
    geofence_setting = pydot.Node("A'", label="Geofence Setting: any values", shape='box', style='filled', fillcolor='lightblue')
    throttle_setting = pydot.Node("B'", label="Throttle: any values", shape='box', style='filled', fillcolor='lightblue')
    mode_offboard = pydot.Node("D", label="Mode: Offboard", shape='box', style='filled', fillcolor='lightblue')

    # Add nodes to the graph
    graph.add_node(top_event)
    graph.add_node(and_gate)
    graph.add_node(or_gate)
    graph.add_node(geofence_setting)
    graph.add_node(throttle_setting)
    graph.add_node(mode_offboard)

    # Create edges
    graph.add_edge(pydot.Edge(top_event, and_gate))
    graph.add_edge(pydot.Edge(and_gate, or_gate))
    graph.add_edge(pydot.Edge(and_gate, mode_offboard))
    graph.add_edge(pydot.Edge(or_gate, geofence_setting))
    graph.add_edge(pydot.Edge(or_gate, throttle_setting))

    # Save the graph as a PNG file
    graph.write_png(file_path)

# Function to display the image using Tkinter
def display_image(file_path):
    root = tk.Tk()
    root.title("Fault Tree Visualization")

    image = Image.open(file_path)
    photo = ImageTk.PhotoImage(image)

    label = ttk.Label(root, image=photo)
    label.image = photo
    label.pack()

    root.mainloop()

# File path to save the image
file_path = 'fault_tree.png'

# Create the fault tree
create_fault_tree(file_path)

# Display the generated fault tree
display_image(file_path)

