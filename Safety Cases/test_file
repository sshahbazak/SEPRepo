from graphviz import Digraph
import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk

def wrap_text(text, width):
    words = text.split()
    wrapped_lines = [' '.join(words[i:i+width]) for i in range(0, len(words), width)]
    return '\n'.join(wrapped_lines)

# Specifications for the safety case
specifications = {
    'nodes': [
        {'id': 'G1', 'label': 'Goal G1', 'text': 'When needed the kill switch stops the motors on the targeted drone.', 'shape': 'rectangle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'S1', 'label': 'Strategy', 'text': 'Argue that the RPIC can kill motors on the targeted drone when needed.', 'shape': 'parallelogram', 'fillcolor': 'gray96', 'margin': '0.0'},
        {'id': 'O1', 'label': 'Solution S1', 'text': 'HiFUZZ tests pass on combos of flight modes, flying states, and killswitch press durations.', 'shape': 'circle', 'fillcolor': 'gray80', 'margin': '0.1'},
        {'id': 'T1', 'label': '', 'text': 'HiFUZZ Tests:\nL1 (118 Passed, 12 Failed)\nL2 (2 Passed, 1 Failed)', 'shape': 'none', 'fillcolor': 'tomato', 'margin': '0.0', 'rows': True}
    ],
    'edges': [
        ('G1', 'S1'),
        ('S1', 'O1'),
        ('O1', 'T1')
    ]
}

# Create a new directed graph
dot = Digraph()

# Add nodes with word wrapping and reduced font size
for node in specifications['nodes']:
    if node.get('rows'):
        text_lines = node['text'].split('\n')
        label = f"""<
            <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4" BGCOLOR="tomato">
                <TR><TD COLSPAN="3">{text_lines[0]}</TD></TR>
                {''.join(f'<TR><TD>{line}</TD></TR>' for line in text_lines[1:])}
            </TABLE>
        >"""
    else:
        wrap_width = 3 if node['shape'] == 'circle' else 7
        text = wrap_text(node['text'], wrap_width)
        label = f'<{node["label"]}>\n{text}' if node['label'] else text
    node_attrs = {
        'fontsize': '15',
        'margin': node.get('margin', '0.1'),
        'fixedsize': 'false'
    }
    dot.node(node['id'], label, shape=node['shape'], fillcolor=node['fillcolor'], style='filled', **node_attrs)

# Add edges
for edge in specifications['edges']:
    dot.edge(*edge)

# Render the graph to a PNG file
graph_image_path = '/mnt/data/output_graph'
dot.render(graph_image_path, format='png')

# Create a Tkinter window
root = tk.Tk()
root.title("Graph Visualization")

# Load the image using PIL
image = Image.open(graph_image_path + '.png') # Add the .png extension
photo = ImageTk.PhotoImage(image)

# Create a label to display the image
label = ttk.Label(root, image=photo)
label.image = photo # Keep a reference to the image
label.pack()

# Start the Tkinter main loop
root.mainloop()